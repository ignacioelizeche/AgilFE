"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Dsig = require('facturacionelectronicapy-pkcs12');
class XMLSign {
    signWithNode(xmls, tag, file, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    var separator = '_SEPARATOR_';
                    var dsig = new Dsig(file);
                    dsig.openSession(password);
                    let xmlFirmado = '';
                    for (let i = 0; i < xmls.length; i++) {
                        const xml = xmls[i];
                        xmlFirmado += dsig.computeSignature(xmls[0], tag) + separator;
                    }
                    //Retira el ultimo _SEPARATOR_
                    xmlFirmado = xmlFirmado.substring(0, xmlFirmado.length - separator.length);
                    resolve(xmlFirmado);
                }
                catch (e) {
                    console.error(e);
                    reject(e);
                }
                finally {
                    dsig.closeSession();
                }
            }));
        });
    }
}
exports.default = new XMLSign();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWE1MU2lnbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9YTUxTaWduLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFFeEQsTUFBTSxPQUFPO0lBRUUsWUFBWSxDQUFDLElBQWdCLEVBQUUsR0FBUSxFQUFFLElBQVMsRUFBRSxRQUFhOztZQUM1RSxPQUFPLElBQUksT0FBTyxDQUFDLENBQU8sT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUMzQyxJQUFJO29CQUNBLElBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQztvQkFDOUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBRTNCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztvQkFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ3BDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDcEIsVUFBVSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO3FCQUMvRDtvQkFFRCw4QkFBOEI7b0JBQzlCLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFM0UsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUV2QjtnQkFBQyxPQUFNLENBQUMsRUFBRTtvQkFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2I7d0JBQVM7b0JBQ04sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2lCQUN2QjtZQUNILENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLElBQUksT0FBTyxFQUFFLENBQUMifQ==