declare class XMLDsig {
    private file;
    private passphase;
    private signedInfo;
    private certificate;
    constructor();
    openFile(file: string, passphase: string): void;
    setXMLSignOpts(): void;
    /**
     * Firma con Java, retornando el documento firmado en el buffer de salida
     * @param xml
     * @param tag
     * @returns
     */
    signDocument(xml: string, tag: any): Promise<unknown>;
    /**
     * Firma con Java, varios documentos al mismo tiempo
     * @param xml
     * @param tag
     * @returns
     */
    signDocuments(xmls: Array<any>, tag: any): Promise<unknown>;
    /**
     * Firma el XML del Evento con Java
     * @param xml
     * @param tag
     * @returns
     */
    signEvento(xml: string, tag: any): Promise<unknown>;
    signatureValue(xml: string): string;
    getCertificate(): string;
    private normalizeXML;
    private agregarQr;
    removeLines(str: string): string;
    base64ToArrayBuffer(b64: string): Uint8Array;
    pemToArrayBuffer(pem: string): Uint8Array;
    private asignarFechaFirma;
    private jsonFormat;
    private lpad;
    /**
     * Firma con Java, retornando el documento firmado en el buffer de salida
     * @param xml
     * @param tag
     * @returns
     */
    getExpiration(): Promise<unknown>;
    /**
     * Firma con NODEJS, varios documentos al mismo tiempo
     * @param xml
     * @param tag
     * @returns
     * https://tutoriales.adsib.gob.bo/_08/index.html
     */
    signDocumentsWithNodeJS(xmls: Array<any>, tag: any, file: any, password: any): Promise<unknown>;
}
declare const _default: XMLDsig;
export default _default;
