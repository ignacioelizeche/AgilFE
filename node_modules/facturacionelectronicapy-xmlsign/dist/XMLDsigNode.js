"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//const pkcs12 = require('facturacionelectronicapy-pkcs12');
const fs = require("fs");
const { SignedXml, FileKeyInfo } = require("xml-crypto");
const xmlbuilder = require("xmlbuilder");
const xml2js = require("xml2js");
const node_forge_1 = __importDefault(require("node-forge"));
class XMLDsigNode {
    signDocuments(xmls, tag, file, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var dsig = null;
                try {
                    var separator = "_SEPARATOR_";
                    this.openFile(file, password);
                    let certificate = this.getCertificate();
                    // Crear un objeto SignedXml
                    // Configurar la clave privada para firmar (ejemplo, deberías cargar tu propia clave privada)
                    let xmlFirmado = "";
                    for (let i = 0; i < xmls.length; i++) {
                        const xmlString = xmls[i];
                        const sig = new SignedXml({
                            publicKey: this.getCertificate(),
                            privateKey: this.getPrivateKey(),
                            passphrase: password,
                            getKeyInfoContent: (publicKey, prefix) => {
                                const certContent = certificate.replace(/(?:\r\n|\r|\n)/g, ""); // Remover saltos de línea del certificado
                                return `<X509Data><X509Certificate>${certContent}</X509Certificate></X509Data>`;
                            },
                        });
                        const jsonXML = yield xml2js.parseStringPromise(xmlString);
                        const idAtributo = jsonXML.rDE[tag][0].$.Id;
                        sig.addReference(
                        /*"#" + idAtributo, */ {
                            xpath: "//*[local-name()='" + tag + "']",
                            digestAlgorithm: "http://www.w3.org/2001/04/xmlenc#sha256",
                            transforms: [
                                "http://www.w3.org/2000/09/xmldsig#enveloped-signature",
                                "http://www.w3.org/2001/10/xml-exc-c14n#",
                            ],
                        });
                        sig.signatureAlgorithm =
                            "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"; // Algoritmo de firma RSA con SHA-256
                        sig.canonicalizationAlgorithm =
                            "http://www.w3.org/2001/10/xml-exc-c14n#";
                        // Calcular la firma
                        sig.computeSignature(xmlString);
                        // Obtener la firma en formato XML
                        const xmlWithSignature = sig.getSignedXml();
                        xmlFirmado += xmlWithSignature + separator;
                    }
                    //Retira el ultimo _SEPARATOR_
                    xmlFirmado = xmlFirmado.substring(0, xmlFirmado.length - separator.length);
                    resolve(xmlFirmado);
                }
                catch (e) {
                    console.error(e);
                    reject(e);
                }
                finally {
                    if (dsig != null) {
                        //dsig.closeSession();
                    }
                }
            }));
        });
    }
    signDocument(xmlString, tag, file, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var dsig = null;
                try {
                    this.openFile(file, password);
                    let certificate = this.getCertificate();
                    // Crear un objeto SignedXml
                    // Configurar la clave privada para firmar (ejemplo, deberías cargar tu propia clave privada)
                    let xmlFirmado = "";
                    const sig = new SignedXml({
                        publicKey: this.getCertificate(),
                        privateKey: this.getPrivateKey(),
                        passphrase: password,
                        getKeyInfoContent: (publicKey, prefix) => {
                            const certContent = certificate.replace(/(?:\r\n|\r|\n)/g, ""); // Remover saltos de línea del certificado
                            return `<X509Data><X509Certificate>${certContent}</X509Certificate></X509Data>`;
                        },
                    });
                    const jsonXML = yield xml2js.parseStringPromise(xmlString);
                    const idAtributo = jsonXML.rDE[tag][0].$.Id;
                    sig.addReference(
                    /*"#" + idAtributo, */ {
                        xpath: "//*[local-name()='" + tag + "']",
                        digestAlgorithm: "http://www.w3.org/2001/04/xmlenc#sha256",
                        transforms: [
                            "http://www.w3.org/2000/09/xmldsig#enveloped-signature",
                            "http://www.w3.org/2001/10/xml-exc-c14n#",
                        ],
                    });
                    sig.signatureAlgorithm =
                        "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"; // Algoritmo de firma RSA con SHA-256
                    sig.canonicalizationAlgorithm =
                        "http://www.w3.org/2001/10/xml-exc-c14n#";
                    // Calcular la firma
                    sig.computeSignature(xmlString);
                    // Obtener la firma en formato XML
                    const xmlWithSignature = sig.getSignedXml();
                    xmlFirmado += xmlWithSignature;
                    resolve(xmlFirmado);
                }
                catch (e) {
                    console.error(e);
                    reject(e);
                }
                finally {
                    if (dsig != null) {
                        //dsig.closeSession();
                    }
                }
            }));
        });
    }
    signEvento(xmlString, tag, file, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var dsig = null;
                try {
                    //var separator = "_SEPARATOR_";
                    this.openFile(file, password);
                    let certificate = this.getCertificate();
                    // Crear un objeto SignedXml
                    // Configurar la clave privada para firmar (ejemplo, deberías cargar tu propia clave privada)
                    let xmlFirmado = "";
                    const sig = new SignedXml({
                        publicKey: this.getCertificate(),
                        privateKey: this.getPrivateKey(),
                        passphrase: password,
                        getKeyInfoContent: (publicKey, prefix) => {
                            const certContent = certificate.replace(/(?:\r\n|\r|\n)/g, ""); // Remover saltos de línea del certificado
                            return `<X509Data><X509Certificate>${certContent}</X509Certificate></X509Data>`;
                        },
                    });
                    const jsonXML = yield xml2js.parseStringPromise(xmlString);
                    const idAtributo = jsonXML["env:Envelope"]["env:Body"][0]["rEnviEventoDe"][0]["dEvReg"][0]["gGroupGesEve"][0]["rGesEve"][0][tag][0].$.Id;
                    sig.addReference(
                    /*"#" + idAtributo, */ {
                        xpath: "//*[local-name()='" + tag + "']",
                        digestAlgorithm: "http://www.w3.org/2001/04/xmlenc#sha256",
                        transforms: [
                            "http://www.w3.org/2000/09/xmldsig#enveloped-signature",
                            "http://www.w3.org/2001/10/xml-exc-c14n#",
                        ],
                    });
                    sig.signatureAlgorithm =
                        "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"; // Algoritmo de firma RSA con SHA-256
                    sig.canonicalizationAlgorithm =
                        "http://www.w3.org/2001/10/xml-exc-c14n#";
                    // Calcular la firma
                    sig.computeSignature(xmlString, {
                        location: {
                            reference: "//*[local-name()='" + tag + "']",
                            action: "after",
                        },
                    });
                    // Obtener la firma en formato XML
                    const xmlWithSignature = sig.getSignedXml();
                    xmlFirmado += xmlWithSignature;
                    resolve(xmlFirmado);
                }
                catch (e) {
                    console.error(e);
                    reject(e);
                }
                finally {
                    if (dsig != null) {
                        //dsig.closeSession();
                    }
                }
            }));
        });
    }
    openCertificate(file) {
        if (fs.existsSync(file)) {
            const pkcs12 = fs.readFileSync(file);
            this.p12Asn1 = node_forge_1.default.asn1.fromDer(pkcs12.toString("binary"));
        }
        else {
            throw Error(file + " no encontrado!");
        }
    }
    openFile(file, passphase) {
        this.openCertificate(file);
        this.p12 = node_forge_1.default.pkcs12.pkcs12FromAsn1(this.p12Asn1, false, passphase);
    }
    cleanCertificate() {
        this.p12 = undefined;
    }
    getCertificate() {
        for (let i = 0; i < this.p12.safeContents.length; i++) {
            if (this.p12.safeContents[i].safeBags[0].cert) {
                const b64 = node_forge_1.default.pki.certificateToPem(this.p12.safeContents[i].safeBags[0].cert);
                const l = b64.split("\n");
                l.pop();
                l.pop();
                l[0] = "";
                return l.join("\n");
            }
        }
        return null;
    }
    getPrivateKey() {
        for (let i = 0; i < this.p12.safeContents.length; i++) {
            if (this.p12.safeContents[i].safeBags[0].key) {
                return node_forge_1.default.pki.privateKeyToPem(this.p12.safeContents[i].safeBags[0].key);
            }
        }
        return null;
    }
    getExpiration(file, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const p12File = fs.readFileSync(file);
                    const p12Asn1 = node_forge_1.default.asn1.fromDer(node_forge_1.default.util.createBuffer(p12File.toString("binary")));
                    const p12 = node_forge_1.default.pkcs12.pkcs12FromAsn1(p12Asn1, password); // Cambia 'your-password' por la contraseña de tu archivo .p12
                    const certBag1 = p12.getBags({ bagType: node_forge_1.default.pki.oids.certBag });
                    const certBag = certBag1[node_forge_1.default.pki.oids.certBag][0];
                    const certificate = certBag.cert;
                    resolve(certificate.validity);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
}
exports.default = new XMLDsigNode();
//# sourceMappingURL=data:application/json;base64,