"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jszip_1 = __importDefault(require("jszip"));
const PKCS12_1 = __importDefault(require("./PKCS12"));
const xml2js_1 = __importDefault(require("xml2js"));
const fs_1 = __importDefault(require("fs"));
const worker_threads_1 = require("worker_threads");
const https = require("https");
const axios = require("axios");
class SET {
    /**
     * Crea los certificados para authenticarse a la SET.
     * @param certificado
     * @param passphase
     * /
    /*auth(env: "test" | "prod", certificado: any, passphase: string) {
      pkcs12.openFile(certificado, passphase);
      this.env = env;
      this.cert = pkcs12.getCertificate();
      this.key = pkcs12.getPrivateKey();
    }
    */
    abrir(certificado, passphase) {
        PKCS12_1.default.openFile(certificado, passphase);
        this.cert = PKCS12_1.default.getCertificate();
        this.key = PKCS12_1.default.getPrivateKey();
    }
    /**
     * Consulta un Documento Electronico por CDC
     *
     * @param cdc
     * @returns
     */
    consulta(id, cdc, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                defaultConfig = Object.assign(defaultConfig, config);
                this.abrir(certificado, passphase);
                let url = "https://sifen.set.gov.py/de/ws/consultas/consulta.wsdl";
                if (env == "test") {
                    url = "https://sifen-test.set.gov.py/de/ws/consultas/consulta.wsdl";
                }
                //console.log("URL invocado...", url);
                if (!this.cert) {
                    reject("Antes debe Autenticarse");
                }
                if (!this.key) {
                    reject("Antes debe autenticarse");
                }
                const httpsAgent = new https.Agent({
                    cert: Buffer.from(this.cert, "utf8"),
                    key: Buffer.from(this.key, "utf8"),
                });
                let soapXMLData = `<?xml version="1.0" encoding="UTF-8"?>\n\
                        <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnviConsDeRequest xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                  <dId>${id}</dId>\n\
                                  <dCDC>${cdc}</dCDC>\n\
                                </rEnviConsDeRequest>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                axios
                    .post(`${url}`, soapXMLData, {
                    headers: {
                        "User-Agent": "facturaSend",
                        "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                })
                    .then((respuestaSuccess) => {
                    var parser = new xml2js_1.default.Parser({ explicitArray: false });
                    //console.log("statuscode", respuestaSuccess);
                    //console.log(respuestaSuccess.status);
                    if (respuestaSuccess.status == 200) {
                        if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                            parser
                                .parseStringPromise(respuestaSuccess.data)
                                .then(function (result) {
                                const resultData = result["env:Envelope"]["env:Body"];
                                //delete resultData.$;
                                resultData.id = id;
                                resolve(resultData);
                            });
                        }
                        else {
                            if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                reject(new Error("Error de la SET BIG-IP logout page"));
                            }
                            else {
                                reject(new Error(respuestaSuccess.data + ""));
                            }
                        }
                    }
                    else {
                        reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                })
                    .catch((err) => {
                    if (err && err.response && err.response.data) {
                        var xmlResponse = err.response.data;
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        parser
                            .parseStringPromise(xmlResponse)
                            .then(function (result) {
                            const resultData = result["env:Envelope"]["env:Body"];
                            resultData.id = id;
                            resolve(resultData);
                        })
                            .catch(function (err) {
                            reject(err);
                        });
                    }
                    else {
                        reject(err);
                    }
                });
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    /**
     * Consulta un lote en la SET
     * @param id
     * @param numeroProtocolo
     * @returns
     */
    consultaLote2222(id, numeroProtocolo, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                //console.log("El config del params viene ", config);
                defaultConfig = Object.assign(defaultConfig, config);
                let url = "https://sifen.set.gov.py/de/ws/consultas/consulta-lote.wsdl";
                if (env == "test") {
                    url =
                        "https://sifen-test.set.gov.py/de/ws/consultas/consulta-lote.wsdl";
                }
                /*this.abrir(certificado, passphase);
        
                if (!this.cert) {
                  reject("Antes debe Autenticarse");
                }
        
                if (!this.key) {
                  reject("Antes debe autenticarse");
                }*/
                /*const httpsAgent = new https.Agent({
                  cert: Buffer.from(this.cert, "utf8"),
                  key: Buffer.from(this.key, "utf8"),
                });*/
                let soapXMLData = `<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnviConsLoteDe xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                    <dId>${id}</dId>\n\
                                    <dProtConsLote>${numeroProtocolo}</dProtConsLote>\n\
                                </rEnviConsLoteDe>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                console.log("soapXMLData", {
                    url,
                    soapXMLData,
                    id,
                    certificado,
                    passphase,
                    timeout: defaultConfig.timeout,
                    path: "./workerConsultaSET.ts",
                });
                const runService = (WorkerData) => {
                    return new Promise((resolve, reject) => {
                        const worker = new worker_threads_1.Worker("./workerConsultaLote", {
                            workerData: {
                                url,
                                soapXMLData,
                                certificado,
                                passphase,
                                id,
                                timeout: defaultConfig.timeout,
                                path: "./workerConsultaLote.ts",
                            },
                        });
                        worker.on("message", resolve);
                        worker.on("error", reject);
                        worker.on("exit", (code) => {
                            if (code !== 0)
                                reject(new Error(`stopped with  ${code} exit code`));
                        });
                    });
                };
                const run = () => __awaiter(this, void 0, void 0, function* () {
                    const result = yield runService("hello node.js");
                    console.log(result);
                });
                run().catch((err) => console.error(err));
                /*
                axios
                  .post(`${url}`, soapXMLData, {
                    headers: {
                      "User-Agent": "facturaSend",
                      "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                  })
                  .then((respuestaSuccess: any) => {
                    var parser = new xml2js.Parser({ explicitArray: false });
        
                    if (respuestaSuccess.status == 200) {
                      if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                        parser
                          .parseStringPromise(respuestaSuccess.data)
                          .then(function (result) {
                            const resultData = JSON.parse(
                              JSON.stringify(result["env:Envelope"]["env:Body"])
                            );
                            resultData.id = id;
        
                            resolve(resultData);
                          });
                      } else {
                        if ((respuestaSuccess.data + "").startsWith("<html>")) {
                          reject(new Error("Error de la SET BIG-IP logout page"));
                        } else {
                          reject(new Error(respuestaSuccess.data + ""));
                        }
                      }
                    } else {
                      reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                  })
                  .catch((err: any) => {
                    console.log("CAtch en error 1111", err);
                    if (err && err.response && err.response.data) {
                      var xmlResponse = err.response.data;
                      var parser = new xml2js.Parser({ explicitArray: false });
        
                      parser
                        .parseStringPromise(xmlResponse)
                        .then(function (result) {
                          resolve(result["env:Envelope"]["env:Body"]);
                        })
                        .catch(function (err) {
                          reject(err);
                        });
                    } else {
                      reject(err);
                    }
                  });
        
        
                  */
            }
            catch (error) {
                console.log("CAtch en error 2222", error);
                reject(error);
            }
        }));
    }
    /**
     * Consulta un lote en la SET
     * @param id
     * @param numeroProtocolo
     * @returns
     */
    consultaLote(id, numeroProtocolo, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                //console.log("El config del params viene ", config);
                defaultConfig = Object.assign(defaultConfig, config);
                this.abrir(certificado, passphase);
                let url = "https://sifen.set.gov.py/de/ws/consultas/consulta-lote.wsdl";
                if (env == "test") {
                    url =
                        "https://sifen-test.set.gov.py/de/ws/consultas/consulta-lote.wsdl";
                }
                if (!this.cert) {
                    reject("Antes debe Autenticarse");
                }
                if (!this.key) {
                    reject("Antes debe autenticarse");
                }
                const httpsAgent = new https.Agent({
                    cert: Buffer.from(this.cert, "utf8"),
                    key: Buffer.from(this.key, "utf8"),
                });
                let soapXMLData = `<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnviConsLoteDe xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                    <dId>${id}</dId>\n\
                                    <dProtConsLote>${numeroProtocolo}</dProtConsLote>\n\
                                </rEnviConsLoteDe>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                axios
                    .post(`${url}`, soapXMLData, {
                    headers: {
                        "User-Agent": "facturaSend",
                        "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                })
                    .then((respuestaSuccess) => {
                    var parser = new xml2js_1.default.Parser({ explicitArray: false });
                    if (respuestaSuccess.status == 200) {
                        if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                            parser
                                .parseStringPromise(respuestaSuccess.data)
                                .then(function (result) {
                                const resultData = JSON.parse(JSON.stringify(result["env:Envelope"]["env:Body"]));
                                resultData.id = id;
                                resolve(resultData);
                            });
                        }
                        else {
                            if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                reject(new Error("Error de la SET BIG-IP logout page"));
                            }
                            else {
                                reject(new Error(respuestaSuccess.data + ""));
                            }
                        }
                    }
                    else {
                        reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                })
                    .catch((err) => {
                    console.log("CAtch en error 1111", err);
                    if (err && err.response && err.response.data) {
                        var xmlResponse = err.response.data;
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        parser
                            .parseStringPromise(xmlResponse)
                            .then(function (result) {
                            resolve(result["env:Envelope"]["env:Body"]);
                        })
                            .catch(function (err) {
                            reject(err);
                        });
                    }
                    else {
                        reject(err);
                    }
                });
            }
            catch (error) {
                console.log("CAtch en error 2222", error);
                reject(error);
            }
        }));
    }
    /**
     *
     * @param xml
     * @returns
     */
    consultaRUC(id, ruc, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                defaultConfig = Object.assign(defaultConfig, config);
                this.abrir(certificado, passphase);
                let url = "https://sifen.set.gov.py/de/ws/consultas/consulta-ruc.wsdl";
                if (env == "test") {
                    url =
                        "https://sifen-test.set.gov.py/de/ws/consultas/consulta-ruc.wsdl";
                }
                if (!this.cert) {
                    reject("Antes debe Autenticarse");
                }
                if (!this.key) {
                    reject("Antes debe autenticarse");
                }
                const httpsAgent = new https.Agent({
                    cert: Buffer.from(this.cert, "utf8"),
                    key: Buffer.from(this.key, "utf8"),
                });
                let soapXMLData = `<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnviConsRUC xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                    <dId>${id}</dId>\n\
                                    <dRUCCons>${ruc}</dRUCCons>\n\
                                </rEnviConsRUC>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                axios
                    .post(`${url}`, soapXMLData, {
                    headers: {
                        "User-Agent": "facturaSend",
                        "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                })
                    .then((respuestaSuccess) => {
                    var parser = new xml2js_1.default.Parser({ explicitArray: false });
                    //console.log("respuestaSuccess.data", respuestaSuccess.data);
                    //console.log("statuscode", respuestaSuccess.status);
                    ////console.log(respuestaSuccess.statusCode);
                    if (respuestaSuccess.status == 200) {
                        if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                            parser
                                .parseStringPromise(respuestaSuccess.data)
                                .then(function (result) {
                                const resultData = result["env:Envelope"]["env:Body"];
                                resultData.id = id;
                                resolve(resultData);
                            });
                        }
                        else {
                            if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                reject(new Error("Error de la SET BIG-IP logout page"));
                            }
                            else {
                                reject(new Error(respuestaSuccess.data + ""));
                            }
                        }
                    }
                    else {
                        //reject(new Error("Error en la respuesta de comunicaciÃ³n con la SET " + respuestaSuccess.data));
                        reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                })
                    .catch((err) => {
                    if (err && err.response && err.response.data) {
                        var xmlResponse = err.response.data;
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        parser
                            .parseStringPromise(xmlResponse)
                            .then(function (result) {
                            const resultData = result["env:Envelope"]["env:Body"];
                            resultData.id = id;
                            resolve(resultData);
                        })
                            .catch(function (err) {
                            reject(err);
                        });
                    }
                    else {
                        reject(err);
                    }
                });
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    /**
     * Envia el Documento electronico a la SET
     * https://sifen.set.gov.py/de/ws/sync/recibe.wsdl
     * @param xml
     * @returns
     */
    recibe(id, xml, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                defaultConfig = Object.assign(defaultConfig, config);
                this.abrir(certificado, passphase);
                let url = "https://sifen.set.gov.py/de/ws/sync/recibe.wsdl";
                if (env == "test") {
                    url = "https://sifen-test.set.gov.py/de/ws/sync/recibe.wsdl";
                }
                if (!this.cert) {
                    reject("Antes debe Autenticarse");
                }
                if (!this.key) {
                    reject("Antes debe autenticarse");
                }
                const httpsAgent = new https.Agent({
                    cert: Buffer.from(this.cert, "utf8"),
                    key: Buffer.from(this.key, "utf8"),
                });
                xml = xml.split("\n").slice(1).join("\n"); //Retirar <xml>
                let soapXMLData = `<?xml version="1.0" encoding="UTF-8"?>\n\
                        <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnviDe xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                    <dId>${id}</dId>\n\
                                    <xDE>${xml}</xDE>\n\
                                </rEnviDe>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("url", url, "soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                axios
                    .post(`${url}`, soapXMLData, {
                    headers: {
                        "User-Agent": "facturaSend",
                        "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                })
                    .then((respuestaSuccess) => {
                    var parser = new xml2js_1.default.Parser({ explicitArray: false });
                    if (respuestaSuccess.status == 200) {
                        if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                            parser
                                .parseStringPromise(respuestaSuccess.data)
                                .then(function (result) {
                                //resolve(result['env:Envelope']['env:Body']);
                                const resultData = 
                                //result["env:Envelope"]["env:Body"]["ns2:rRetEnviDe"];
                                result["env:Envelope"]["env:Body"];
                                //delete resultData.$;
                                resultData["id"] = id;
                                resolve(resultData);
                            });
                        }
                        else {
                            if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                //console.log("setApi - recibe " + respuestaSuccess.data);
                                reject(new Error("Error de la SET BIG-IP logout page"));
                            }
                            else {
                                reject(new Error(respuestaSuccess.data + ""));
                            }
                        }
                    }
                    else {
                        //reject(new Error("Error en la respuesta de comunicaciÃ³n con la SET " + respuestaSuccess.data));
                        reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                })
                    .catch((err) => {
                    if (err && err.response && err.response.data) {
                        var xmlResponse = err.response.data;
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        parser
                            .parseStringPromise(xmlResponse)
                            .then(function (result) {
                            const resultData = result["env:Envelope"]["env:Body"];
                            resultData["id"] = id;
                            resolve(resultData);
                        })
                            .catch(function (err) {
                            reject(err);
                        });
                    }
                    else {
                        reject(err);
                    }
                });
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    /**
     * Envia el Documento electronico por lote a la SET
     * https://sifen.set.gov.py/de/ws/async/recibe-lote.wsdl
     * @param xmls
     * @returns
     */
    recibeLote(id, xmls, env, certificado, passphase, config) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let defaultConfig = {
                    debug: false,
                    timeout: 90000,
                };
                defaultConfig = Object.assign(defaultConfig, config);
                this.abrir(certificado, passphase);
                if (xmls.length == 0) {
                    reject("No se enviÃ³ datos en el array de Documentos electrÃ³nicos XMLs");
                }
                if (xmls.length > 50) {
                    reject("SÃ³lo se permiten un mÃ¡ximo de 50 Documentos electrÃ³nicos XML por lote");
                }
                let url = "https://sifen.set.gov.py/de/ws/async/recibe-lote.wsdl";
                if (env == "test") {
                    url = "https://sifen-test.set.gov.py/de/ws/async/recibe-lote.wsdl";
                }
                if (!this.cert) {
                    reject("Antes debe Autenticarse");
                }
                if (!this.key) {
                    reject("Antes debe autenticarse");
                }
                const zip = new jszip_1.default();
                let rLoteDEXml = `<rLoteDE>\n`;
                for (let i = 0; i < xmls.length; i++) {
                    //const xml = xmls[i];
                    const xml = xmls[i].split("\n").slice(1).join("\n"); //Retirar xml
                    rLoteDEXml += `${xml}\n`;
                }
                rLoteDEXml += `</rLoteDE>`;
                rLoteDEXml = this.normalizeXML(rLoteDEXml);
                zip.file(`xml_file.xml`, `<?xml version="1.0" encoding="UTF-8"?>${rLoteDEXml}`);
                const zipAsBase64 = yield zip.generateAsync({ type: "base64" });
                //fs.writeFileSync(__dirname + '/zipped.zip', zipAsBase64);
                const httpsAgent = new https.Agent({
                    cert: Buffer.from(this.cert, "utf8"),
                    key: Buffer.from(this.key, "utf8"),
                });
                //axios.get(`${url}`, { httpsAgent }).then((respuesta: any) => {
                let soapXMLData = `<?xml version="1.0" encoding="UTF-8"?>\n\
                        <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">\n\
                            <env:Header/>\n\
                            <env:Body>\n\
                                <rEnvioLote xmlns="http://ekuatia.set.gov.py/sifen/xsd">\n\
                                    <dId>${id}</dId>\n\
                                    <xDE>${zipAsBase64}</xDE>\n\
                                </rEnvioLote>\n\
                            </env:Body>\n\
                        </env:Envelope>\n`;
                soapXMLData = this.normalizeXML(soapXMLData);
                if (defaultConfig.debug === true) {
                    console.log("url", url, "soapXMLData", soapXMLData);
                }
                if (defaultConfig.saveRequestFile) {
                    const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                }
                axios
                    .post(`${url}`, soapXMLData, {
                    headers: {
                        "User-Agent": "facturaSend",
                        "Content-Type": "application/xml; charset=utf-8",
                    },
                    httpsAgent,
                    timeout: defaultConfig.timeout,
                })
                    .then((respuestaSuccess) => {
                    var parser = new xml2js_1.default.Parser({ explicitArray: false });
                    if (respuestaSuccess.status == 200) {
                        if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                            parser
                                .parseStringPromise(respuestaSuccess.data)
                                .then(function (result) {
                                //resolve(result['env:Envelope']['env:Body']['ns2:rResEnviLoteDe']);
                                const resultData = 
                                //result["env:Envelope"]["env:Body"]["ns2:rResEnviLoteDe"];
                                result["env:Envelope"]["env:Body"];
                                resultData["id"] = id;
                                //result['env:Envelope']['env:Body']['ns2:rResEnviLoteDe']['id'] = id;
                                //const resultData = result['env:Envelope']['env:Body'];
                                delete resultData.$;
                                resolve(resultData);
                            });
                        }
                        else {
                            if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                //console.log("setApi - recibe " + respuestaSuccess.data);
                                reject(new Error("Error de la SET BIG-IP logout page"));
                            }
                            else {
                                reject(new Error(respuestaSuccess.data + ""));
                            }
                        }
                    }
                    else {
                        reject(new Error("Error de conexiÃ³n con la SET"));
                    }
                })
                    .catch((err) => {
                    if (err && err.response && err.response.data) {
                        var xmlResponse = err.response.data;
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        parser
                            .parseStringPromise(xmlResponse)
                            .then(function (result) {
                            const resultData = 
                            /*result["env:Envelope"]["env:Body"]["ns2:rRetEnviDe"][
                            "ns2:rProtDe"
                          ];*/
                            result["env:Envelope"]["env:Body"];
                            resultData["id"] = id;
                            resolve(resultData);
                        })
                            .catch(function (err) {
                            reject(err);
                        });
                    }
                    else {
                        reject(err);
                    }
                });
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    /**
     *
     * @param xml
     * @returns
     */
    evento(id, xml, env, certificado, passphase, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    let defaultConfig = {
                        debug: false,
                        timeout: 90000,
                    };
                    defaultConfig = Object.assign(defaultConfig, config);
                    this.abrir(certificado, passphase);
                    let url = "https://sifen.set.gov.py/de/ws/eventos/evento.wsdl";
                    if (env == "test") {
                        url = "https://sifen-test.set.gov.py/de/ws/eventos/evento.wsdl";
                    }
                    if (!this.cert) {
                        reject("Antes debe Autenticarse");
                    }
                    if (!this.key) {
                        reject("Antes debe autenticarse");
                    }
                    const httpsAgent = new https.Agent({
                        cert: Buffer.from(this.cert, "utf8"),
                        key: Buffer.from(this.key, "utf8"),
                    });
                    let soapXMLData = this.normalizeXML(xml); //Para el evento, el xml ya viene con SoapData
                    if (defaultConfig.debug === true) {
                        console.log("soapXMLData", soapXMLData);
                    }
                    if (defaultConfig.saveRequestFile) {
                        const json = fs_1.default.writeFileSync(defaultConfig.saveRequestFile, soapXMLData);
                    }
                    axios
                        .post(`${url}`, soapXMLData, {
                        headers: {
                            "User-Agent": "facturaSend",
                            "Content-Type": "application/xml; charset=utf-8",
                        },
                        httpsAgent,
                        timeout: defaultConfig.timeout,
                    })
                        .then((respuestaSuccess) => {
                        var parser = new xml2js_1.default.Parser({ explicitArray: false });
                        if (respuestaSuccess.status == 200) {
                            if ((respuestaSuccess.data + "").startsWith("<?xml")) {
                                parser
                                    .parseStringPromise(respuestaSuccess.data)
                                    .then(function (result) {
                                    ///resolve(result['env:Envelope']['env:Body']);
                                    const resultData = result["env:Envelope"]["env:Body"];
                                    resultData.id = id;
                                    //delete resultData.$;
                                    resolve(resultData);
                                });
                            }
                            else {
                                if ((respuestaSuccess.data + "").startsWith("<html>")) {
                                    //console.log("setApi - recibe " + respuestaSuccess.data);
                                    reject(new Error("Error de la SET BIG-IP logout page"));
                                }
                                else {
                                    reject(new Error(respuestaSuccess.data + ""));
                                }
                            }
                        }
                        else {
                            reject(new Error("Error de conexiÃ³n con la SET"));
                        }
                    })
                        .catch((err) => {
                        if (err && err.response && err.response.data) {
                            var xmlResponse = err.response.data;
                            var parser = new xml2js_1.default.Parser({ explicitArray: false });
                            parser
                                .parseStringPromise(xmlResponse)
                                .then(function (result) {
                                const resultData = result["env:Envelope"]["env:Body"];
                                resultData.id = id;
                                resolve(resultData);
                            })
                                .catch(function (err) {
                                reject(err);
                            });
                        }
                        else {
                            reject(err);
                        }
                    });
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    normalizeXML(xml) {
        xml = xml.split("\r\n").join("");
        xml = xml.split("\n").join("");
        xml = xml.split("\t").join("");
        xml = xml.split("    ").join("");
        xml = xml.split(">    <").join("><");
        xml = xml.split(">  <").join("><");
        xml = xml.replace(/\r?\n|\r/g, "");
        return xml;
    }
}
exports.default = new SET();
//# sourceMappingURL=data:application/json;base64,